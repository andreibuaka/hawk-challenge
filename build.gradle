plugins {
    id 'application'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    
    // Mockito for mocking in tests
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'

    // Logging Facade (SLF4j) and Implementation (Logback)
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    
    // JSON logging support
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    
    // Add Micrometer for metrics (optional but recommended)
    implementation 'io.micrometer:micrometer-core:1.9.0'
}

application {
    mainClass = 'com.example.HelloWorld'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    
    // Enable preview features if needed
    // toolchain {
    //    languageVersion = JavaLanguageVersion.of(17)
    // }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
    
    // Fail the build if tests fail
    ignoreFailures = false
}

checkstyle {
    toolVersion = '9.3'
    configFile = file("config/checkstyle.xml")
    maxWarnings = 0
    ignoreFailures = false
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.4 // Minimum 40% coverage
            }
        }
        
        // Additional rules can be added for specific packages
        rule {
            element = 'CLASS'
            includes = ['com.example.HelloWorld']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}

// Ensure check runs after test
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

// Create a fat JAR with all dependencies
jar {
    manifest {
        attributes(
            'Main-Class': 'com.example.HelloWorld',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Built-By': System.properties['user.name'],
            'Built-Date': new Date(),
            'Built-JDK': System.properties['java.version']
        )
    }
    
    // Include all runtime dependencies
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Handle duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Add a task to run the application with proper logging
task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.HelloWorld'
    systemProperties = System.properties
    
    // Configure JVM options
    jvmArgs = ['-Xms64m', '-Xmx128m']
}
