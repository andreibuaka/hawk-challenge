name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggering

# Define default permissions for the workflow
permissions:
  contents: read # Default: read-only access
  packages: write # Needed for Docker push to GitHub Packages (if used)

# Only allow one deployment to run at a time for the main branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests with coverage
      run: ./gradlew test jacocoTestReport jacocoTestCoverageVerification

    - name: Run Checkstyle
      run: ./gradlew checkstyleMain

    - name: Upload test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results
        path: build/reports/tests/

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: build/reports/jacoco/

    - name: Build Docker image
      run: |
        docker build -t ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }} .
        docker tag ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }} ${{ github.repository_owner }}/hawk-hello-world:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }}
        docker push ${{ github.repository_owner }}/hawk-hello-world:latest

  ephemeral-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        cluster_name: ephemeral-test

    - name: Grant execute permission for ephemeral check script
      run: chmod +x ephemeral-check.sh

    - name: Deploy to ephemeral environment
      run: |
        helm install ephemeral-hello ./helm \
          --set image.repository=${{ github.repository_owner }}/hawk-hello-world \
          --set image.tag=${{ needs.build.outputs.image_tag }} \
          --set ephemeral=true \
          --wait

    - name: Run smoke test
      run: ./ephemeral-check.sh

    - name: Upload ephemeral logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ephemeral-logs
        path: ephemeral-logs.txt

    - name: Cleanup ephemeral environment
      if: always()
      run: |
        helm uninstall ephemeral-hello || true
        kind delete cluster --name ephemeral-test || true

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, ephemeral-test]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    # Grant write permission for contents for this specific job
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install yq
      run: |
        # Download yq binary
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /tmp/yq
        # Download checksum
        wget https://github.com/mikefarah/yq/releases/latest/download/checksums -O /tmp/checksums
        # Verify checksum
        grep yq_linux_amd64 /tmp/checksums | sha256sum -c -
        # Install if checksum is valid
        sudo mv /tmp/yq /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        rm /tmp/checksums
      shell: bash

    - name: Update Helm chart values using yq
      run: |
        CURRENT_COLOR=$(grep 'color:' ./helm/values.yaml | awk '{print $2}')
        if [ "$CURRENT_COLOR" == "blue" ]; then
          NEW_COLOR="green"
        else
          NEW_COLOR="blue"
        fi
        
        echo "Switching deployment color to: $NEW_COLOR"
        echo "Updating image tag to: ${{ needs.build.outputs.image_tag }}"
        
        # Update the values.yaml file with new image tag and color using yq
        yq e '.image.tag = "${{ needs.build.outputs.image_tag }}"' -i ./helm/values.yaml
        yq e '.deployment.color = env(NEW_COLOR)' -i ./helm/values.yaml
        
        # Configure Git
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Commit and push changes
        git add ./helm/values.yaml
        git commit -m "Update image tag to ${{ needs.build.outputs.image_tag }} and switch to $NEW_COLOR deployment"
        
        # Push changes using a PAT or Deploy Key stored in secrets.GIT_PUSH_TOKEN
        # Ensure the secret GIT_PUSH_TOKEN is configured in repository settings
        git remote set-url origin https://x-access-token:${{ secrets.GIT_PUSH_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Attempt git push with retries
        for i in 1 2 3; do
          git push origin HEAD:main && echo "Git push successful on attempt $i" && break
          if [ $i -eq 3 ]; then
            echo "Git push failed after $i attempts."
            exit 1
          fi
          echo "Git push failed on attempt $i. Retrying in 5 seconds..."
          sleep 5
        done
      env:
        NEW_COLOR: "${{ env.NEW_COLOR }}" # Pass NEW_COLOR to env context for yq

    - name: ArgoCD Sync Triggered
      run: |
        echo "Pipeline has pushed updated Helm values to Git (repoURL: ${{ github.server_url }}/${{ github.repository }}.git, path: helm)."
        echo "If ArgoCD is configured locally (or remotely) to watch this repository and path,"
        echo "it will now automatically detect the change and sync the application."
        echo "Image tag pushed: ${{ needs.build.outputs.image_tag }}"
        echo "Deployment color set to: $(yq e '.deployment.color' ./helm/values.yaml)"
