name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggering

# Only allow one deployment to run at a time for the main branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Gradle Wrapper
      run: |
        mkdir -p gradle/wrapper
        curl -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v7.4.2/gradle/wrapper/gradle-wrapper.jar

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests with coverage
      run: ./gradlew test jacocoTestReport jacocoTestCoverageVerification

    - name: Run Checkstyle
      run: ./gradlew checkstyleMain

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: build/reports/tests/

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: build/reports/jacoco/

    - name: Build Docker image
      run: |
        docker build -t ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }} .
        docker tag ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }} ${{ github.repository_owner }}/hawk-hello-world:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ github.repository_owner }}/hawk-hello-world:${{ github.sha }}
        docker push ${{ github.repository_owner }}/hawk-hello-world:latest

  ephemeral-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        cluster_name: ephemeral-test

    - name: Grant execute permission for ephemeral check script
      run: chmod +x ephemeral-check.sh

    - name: Deploy to ephemeral environment
      run: |
        helm install ephemeral-hello ./helm \
          --set image.repository=${{ github.repository_owner }}/hawk-hello-world \
          --set image.tag=${{ needs.build.outputs.image_tag }} \
          --set ephemeral=true \
          --wait

    - name: Run smoke test
      run: ./ephemeral-check.sh

    - name: Upload ephemeral logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ephemeral-logs
        path: ephemeral-logs.txt

    - name: Cleanup ephemeral environment
      if: always()
      run: |
        helm uninstall ephemeral-hello || true
        kind delete cluster --name ephemeral-test || true

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, ephemeral-test]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Update Helm chart values
      run: |
        # Determine current color and switch to the other one
        CURRENT_COLOR=$(grep 'color:' ./helm/values.yaml | awk '{print $2}')
        if [ "$CURRENT_COLOR" == "blue" ]; then
          NEW_COLOR="green"
        else
          NEW_COLOR="blue"
        fi
        
        # Update the values.yaml file with new image tag and color
        sed -i "s/tag: .*/tag: ${{ needs.build.outputs.image_tag }}/" ./helm/values.yaml
        sed -i "s/color: .*/color: $NEW_COLOR/" ./helm/values.yaml
        
        # Configure Git
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Commit and push changes
        git add ./helm/values.yaml
        git commit -m "Update image tag to ${{ needs.build.outputs.image_tag }} and switch to $NEW_COLOR deployment"
        git push

    - name: Simulate ArgoCD Sync
      run: |
        echo "In a real environment, ArgoCD would detect the change in the Git repository"
        echo "and automatically sync the application to the Kubernetes cluster."
        echo "Image tag deployed: ${{ needs.build.outputs.image_tag }}"
        echo "Deployment color: $(grep 'color:' ./helm/values.yaml | awk '{print $2}')"
